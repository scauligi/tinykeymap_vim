*tinykeymap.txt*    Tiny, temporary keymaps
                    Author: Tom Link, micathom at gmail com

This plugin is a 90% clone of Andy Wokula's tinymode (vimscript #2223). 
It takes a different approach that hopefully avoids certain problems 
without creating new ones. tinymode actually creates maps to do its job, 
tinykeymap only creates maps for the entry sequence and uses the 
|getchar()| function to handle further input.

This plugin lets users define "temporary keymaps", a.k.a. tinykeymaps, 
with the |tinykeymap#EnterMap()| function. Users can define a map to 
activate a tinykeymap. Users can then use single key shortcuts to 
trigger commands defined with |tinykeymap#Map()|. Pressing an undefined 
key or <Esc>, deactivates the tinykeymap.

tinykeymap comes with the following pre-defined tinykeymaps (see 
|g:tinykeymap#mapleader| and the related g:tinykeymap#*#map variables for how 
to customize the key binding):

    buffers ... Navigate/operate on buffers
                Enter map: <Leader>mb
    diff    ... Navigate/operate on |diff|s
                Enter map: <Leader>md
    filter  ... "filter" text in a buffer using folds
                Enter map: <Leader>mf
    lines   ... Navigate/operate on lines (similar to vimscript #4140)
                Enter map: <Leader>ml
    loc     ... Navigate the |location-list|
                Enter map: <Leader>mo
    qfl     ... Navigate the |quickfix| list
                Enter map: <Leader>mq
    tabs    ... Navigate/operate on tabs
                Enter map: gt
    undo    ... Navigate/operate on the undo tree (with optional support for 
                vimscript #4177)
                Enter map: <Leader>mu
    windows ... Navigate/operate on windows
                Enter map: <C-W>

Example definition for a "tabs" tinykeymap (heavily based on Andy 
Wokula's tabs mode for tinymode): >

    call tinykeymap#EnterMap('tabs', 'gt', {'name': 'Tabs mode'})
    call tinykeymap#Map('tabs', 'n', 'tabnew') 
    call tinykeymap#Map('tabs', 't', 'norm! gt') 
    call tinykeymap#Map('tabs', 'T', 'norm! gT') 
    call tinykeymap#Map("tabs", "^", "tabfirst")
    call tinykeymap#Map("tabs", "$", "tablast")
    call tinykeymap#Map("tabs", "c", "tabclose")

Example use of the above tinykeymap: E.g. pressing gt3n^c2t will:

    gt ... Enter tabs mode
    3n ... create 3 new tabs,
    ^  ... select the first one,
    c  ... close it, and
    2t ... move to the second tab on the right.

A tinykeymap is exited (1) by pressing <Esc> or (2) by timeout (see 
|g:tinykeymap#timeout|).

Differences to tinymode:

    - tinykeymaps and maps may have options (optional)
    - tinykeymaps can be buffer-local
    - dealing with [count] is easier (if a map contains "<count>", this 
      placeholder is replaced with the current [count], i.e. a 
      previously entered number; otherwise the expression is evaluated 
      [count] times)
    - avoid a certain misleading error message

submode (vimscript #2467) is another package that provides similar 
functionality.

-----------------------------------------------------------------------
Install~

In order to install the vba, open the vba file in VIM and type: >

    :so %

See :help vimball for details.

Optional enhancements:

    tlib (vimscript #1863) ... highlight current line in some maps

By default, tinykeymap will load all tinykeymaps in your 'runtimepath'. 
If this is not what you want, set |g:tinykeymaps_default| in your 
|vimrc| file.

Also available via git: http://github.com/tomtom/tinykeymap_vim/
Bug tracker: https://github.com/tomtom/tinykeymap_vim/issues/


========================================================================
Contents~

        :Tinykeymap ........................... |:Tinykeymap|
        :TinykeymapsInfo ...................... |:TinykeymapsInfo|
        g:tinykeymaps_default ................. |g:tinykeymaps_default|
        g:tinykeymap#mapleader ................ |g:tinykeymap#mapleader|
        g:tinykeymap#conflict ................. |g:tinykeymap#conflict|
        g:tinykeymap#timeout .................. |g:tinykeymap#timeout|
        g:tinykeymap#resolution ............... |g:tinykeymap#resolution|
        g:tinykeymap#autokey_msecs ............ |g:tinykeymap#autokey_msecs|
        g:tinykeymap#message_fmt .............. |g:tinykeymap#message_fmt|
        g:tinykeymap#show_message ............. |g:tinykeymap#show_message|
        g:tinykeymap#ignore_error ............. |g:tinykeymap#ignore_error|
        g:tinykeymap#show_error_timeout ....... |g:tinykeymap#show_error_timeout|
        g:tinykeymap#break_key ................ |g:tinykeymap#break_key|
        tinykeymap#Load ....................... |tinykeymap#Load()|
        tinykeymap#EnterMap ................... |tinykeymap#EnterMap()|
        tinykeymap#Info ....................... |tinykeymap#Info()|
        tinykeymap#Map ........................ |tinykeymap#Map()|
        g:tinykeymap#map#buffers#map .......... |g:tinykeymap#map#buffers#map|
        g:tinykeymap#map#folds#map ............ |g:tinykeymap#map#folds#map|
        g:tinykeymap#map#loc#bang ............. |g:tinykeymap#map#loc#bang|
        g:tinykeymap#map#qfl#bang ............. |g:tinykeymap#map#qfl#bang|
        g:tinykeymap#map#tabs#map ............. |g:tinykeymap#map#tabs#map|
        g:tinykeymap#map#undo#map ............. |g:tinykeymap#map#undo#map|
        g:tinykeymap#map#windows#map .......... |g:tinykeymap#map#windows#map|
        tinykeymap#tabs#Previous .............. |tinykeymap#tabs#Previous()|


------------------------------------------------------------------------
                                                    *plugin/tinykeymap.vim*
                                                    *:Tinykeymap*
:Tinykeymap NAME
    Activate a tinykeymap defined with |tinykeymap#EnterMap()|.

                                                    *:TinykeymapsInfo*
:TinykeymapsInfo[!]
    Show information on loaded tinykeymaps.
    With the optional "!", show all details.

                                                    *g:tinykeymaps_default*
g:tinykeymaps_default          (default: ["*"])
    A list tinykeymaps that should be loaded on startup.
    The list may also include |wildcards|. A value of "*" make 
    tinykeymap load all available tinykeymaps.
    See also |tinykeymap#Load()|.


------------------------------------------------------------------------
                                                    *autoload/tinykeymap.vim*
                                                    *g:tinykeymap#mapleader*
g:tinykeymap#mapleader         (default: 'M')
    The mapleader for some tinykeymaps. See also |<Leader>|.

                                                    *g:tinykeymap#conflict*
g:tinykeymap#conflict          (default: 0)
    Conflict resolution if a map is already defined (see 
    |tinykeymap#EnterMap|):
      0 ... Don't create a lead map
      1 ... Don't create a lead map and display a message
      2 ... Create a new lead map and display a message
      3 ... Create a new lead map
      4 ... Throw an error

                                                    *g:tinykeymap#timeout*
g:tinykeymap#timeout           (default: 5000)
    Stop a tinykeymap after X milliseconds.
    If 0, the tinykeymap never stops due to a timeout.

                                                    *g:tinykeymap#resolution*
g:tinykeymap#resolution        (default: 150)
    Number of milliseconds to sleep when polling for characters.

                                                    *g:tinykeymap#autokey_msecs*
g:tinykeymap#autokey_msecs     (default: 5000)
    if a tinykeymap has an autokey option, use |feedkey()| to simulate 
    a key press every N milliseconds.

                                                    *g:tinykeymap#message_fmt*
g:tinykeymap#message_fmt       (default: "-- %s (help <F1>)%s --")
    The format string (see |printf()|) for the tinykeymap message. This 
    format string must contain 2 %s: The first one is for the map's 
    name, the second one for the counter.

                                                    *g:tinykeymap#show_message*
g:tinykeymap#show_message      (default: 'cmdline')
    Where to show a tinykeymap's message. Possible values:
        cmdline (default value)
        statusline

                                                    *g:tinykeymap#ignore_error*
g:tinykeymap#ignore_error      (default: 1)
    If true, don't abort maps on errors.

                                                    *g:tinykeymap#show_error_timeout*
g:tinykeymap#show_error_timeout (default: "500ms")
    If g:tinykeymap#ignore_error is true, show the error message for a 
    short period of time (see |:sleep|).

                                                    *g:tinykeymap#break_key*
g:tinykeymap#break_key         (default: 0)
    By default, users can press <Esc> to abort the map. If non-empty, 
    also use this key. Use :echo getchar() to find out possible 
    values.

                                                    *tinykeymap#Load()*
tinykeymap#Load(maps)
    Load pre-defined tinykeymaps.
    [maps] is either a single name or a list of names.

    Run >
        :echo globpath(&rtp, 'autoload/tinykeymap/map/*.vim')
<   for a list of available tinykeymaps.

                                                    *tinykeymap#EnterMap()*
tinykeymap#EnterMap(name, map, ?options={})
    If you press [map], the tinykeymap [name] becomes effective.

    Pressing <Esc> or an undefined key, causes the tinykeymap to stop. If 
    an undefined keymap is pressed right after [map], [map][key] is queued 
    for processing via |feedkeys()|.

    Options may contain the following keys:
      mode ............ A map mode (see |maparg()|)
      remap ........... If true use, |:map| instead of |:noremap|
      buffer .......... Make the tinykeymap buffer-local
      message ......... An expression that returns a message string (the 
                        string will be shortened if necessary
      automap ......... If false, never automatically activate the map 
                        (this can be useful, e.g., for filetype-specific 
                        maps)
      start ........... An expression |:execute|d before entering the map
      stop ............ An expression |:execute|d after leaving the map
      after ........... An execute |:execute|d after processing a 
                        character
      timeout ......... Map-specific value for |g:tinykeymap#timeout|
      resolution ...... Map-specific value for |g:tinykeymap#resolution|
      unknown_key ..... Function to handle unknown keys
      disable_count ... If true, numeric values are handled as characters
      autokey ......... Simulate a keypress every autokey_msecs 
                        milliseconds
      autokey_msecs ... Milliseconds between simulate "autokey" presses 
                        (default: |g:tinykeymap#autokey_msecs|)

    CAUTION: Currently only normal mode maps (mode == "n") are supported. 
    It is possible to define other type of maps but the behaviour is 
    untested/undefined.

                                                    *tinykeymap#Info()*
tinykeymap#Info(show_all)
    Show information on loaded tinykeymaps.

                                                    *tinykeymap#Map()*
tinykeymap#Map(name, map, expr, ?options={})
    When the tinykeymap [name] is in effect, pressing [map] causes [expr] 
    to be |:execute|d.

    [map] can be a string or a list of characters. It [map] is a string, 
    tinykeymap tries to figure out which keys you meant. If it goes wrong, 
    use a list as the value of [map]. [map] must not be <Esc>, <Del> or 
    <F1>. If [map] is a numeric value, such a map could cause conflicts 
    when using a [count].

    The following keys are handled by tinykeymaps and can/should not be 
    used in maps since they may cause conflicts.

      Numeric value ... Add to [count]
      <Esc> ... Exit a tinykeymap
      <Del> ... Remove the last digit from [count]
      <F1>  ... Display some help

    Any occurence of "<count>" in [expr] is replaced with the current 
    [count]. Occurences of "<lt>" are replaced with "<".
    "<count0>" works similar but a value of 0 is by default.
    "<count1>" works similar but a value of 1 is by default.

    Options may contain the following keys:
      name ... The key's name (to be displayed in the help)
      desc ... The map's description
      exit ... If true, exit the current tinykeymap after evaluating 
               [expr]


------------------------------------------------------------------------
                                                    *autoload/tinykeymap/map/buffers.vim*
                                                    *g:tinykeymap#map#buffers#map*
g:tinykeymap#map#buffers#map   (default: g:tinykeymap#mapleader ."b")
    Map leader for the "buffers" tinykeymap.


------------------------------------------------------------------------
                                                    *autoload/tinykeymap/map/folds.vim*
                                                    *g:tinykeymap#map#folds#map*
g:tinykeymap#map#folds#map     (default: g:tinykeymap#mapleader ."F")
    Map leader for the "folds" tinykeymap.


------------------------------------------------------------------------
                                                    *autoload/tinykeymap/map/loc.vim*
                                                    *g:tinykeymap#map#loc#bang*
g:tinykeymap#map#loc#bang      (default: &hidden ? '!' : '')
    String to add after some loc related commands.


------------------------------------------------------------------------
                                                    *autoload/tinykeymap/map/qfl.vim*
                                                    *g:tinykeymap#map#qfl#bang*
g:tinykeymap#map#qfl#bang      (default: &hidden ? '!' : '')
    String to add after some qfl related commands.


------------------------------------------------------------------------
                                                    *autoload/tinykeymap/map/tabs.vim*
                                                    *g:tinykeymap#map#tabs#map*
g:tinykeymap#map#tabs#map      (default: "gt")
    Map leader for the "tabs" tinykeymap.


------------------------------------------------------------------------
                                                    *autoload/tinykeymap/map/undo.vim*
                                                    *g:tinykeymap#map#undo#map*
g:tinykeymap#map#undo#map      (default: g:tinykeymap#mapleader ."u")
    Map leader for the "undo" tinykeymap.
    If the undotree plugin is available, |:UndotreeToggle| will be 
    called when entering the undo tinykeymap.


------------------------------------------------------------------------
                                                    *autoload/tinykeymap/map/windows.vim*
                                                    *g:tinykeymap#map#windows#map*
g:tinykeymap#map#windows#map   (default: g:tinykeymap#mapleader . 'w')
    Map leader for the "windows" tinykeymap.


------------------------------------------------------------------------
                                                    *autoload/tinykeymap/tabs.vim*
                                                    *tinykeymap#tabs#Previous()*
tinykeymap#tabs#Previous()
    Contributed by Daniel Hahler



vim:tw=78:fo=w2croql:isk=!-~,^*,^|,^":ts=8:ft=help:norl:
